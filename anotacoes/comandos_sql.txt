# Criação de tabelas:
## ANEXOS:
CREATE TABLE anexos (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    nome_arquivo VARCHAR(255) NOT NULL,
    url_arquivo VARCHAR(500) NOT NULL,
    tarefa_id BIGINT NOT NULL,
    upload_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (tarefa_id) REFERENCES tarefas(id) ON DELETE CASCADE,
);




## PROJETOS:
CREATE TABLE projetos (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(255) NOT NULL,
    descricao TEXT,
    status VARCHAR(50),
    data_inicio DATE,
    deadline DATE,
    orcamento DECIMAL(10,2),
    rquipe_id BIGINT NOT NULL,
    FOREIGN KEY (equipe_id) REFERENCES equipes(id)
);

## TAREFAS:
CREATE TABLE tarefas (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    titulo VARCHAR(255) NOT NULL,
    descricao TEXT,
    status VARCHAR(50),
    prioridade VARCHAR(50),
    horas_estimadas INT,
    projeto_id BIGINT NOT NULL,
    cessionario_id BIGINT,
    FOREIGN KEY (projeto_id) REFERENCES projetos(id),
    FOREIGN KEY (cessionario_id) REFERENCES usuarios(id)
);

# Como é a tabela de junção automática criada para o relacionamento N -- N:
CREATE TABLE membros_equipe (
    equipe_id BIGINT NOT NULL,
    usuario_id BIGINT NOT NULL,
    PRIMARY KEY (equipe_id, usuario_id),
    FOREIGN KEY (equipe_id) REFERENCES equipes(id),
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
);





-- Tabela de Usuários
CREATE TABLE users (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL DEFAULT 'MEMBER',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Tabela de Equipes
CREATE TABLE teams (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Tabela de Junção: Membros das Equipes (N-N)
CREATE TABLE team_members (
    team_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (team_id, user_id),
    FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Tabela de Projetos
CREATE TABLE projects (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    status VARCHAR(50) DEFAULT 'PLANNING',
    start_date DATE,
    deadline DATE,
    budget DECIMAL(10,2),
    team_id BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE
);

-- Tabela de Tarefas
CREATE TABLE tasks (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    status VARCHAR(50) DEFAULT 'TODO',
    priority VARCHAR(50) DEFAULT 'MEDIUM',
    estimated_hours INT,
    actual_hours INT,
    project_id BIGINT NOT NULL,
    assignee_id BIGINT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE,
    FOREIGN KEY (assignee_id) REFERENCES users(id) ON DELETE SET NULL
);

-- Tabela de Comentários
CREATE TABLE comments (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    content TEXT NOT NULL,
    task_id BIGINT NOT NULL,
    author_id BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE CASCADE,
    FOREIGN KEY (author_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Índices para melhor performance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_role ON users(role);

CREATE INDEX idx_teams_name ON teams(name);

CREATE INDEX idx_team_members_team ON team_members(team_id);
CREATE INDEX idx_team_members_user ON team_members(user_id);

CREATE INDEX idx_projects_team ON projects(team_id);
CREATE INDEX idx_projects_status ON projects(status);
CREATE INDEX idx_projects_deadline ON projects(deadline);

CREATE INDEX idx_tasks_project ON tasks(project_id);
CREATE INDEX idx_tasks_assignee ON tasks(assignee_id);
CREATE INDEX idx_tasks_status ON tasks(status);
CREATE INDEX idx_tasks_priority ON tasks(priority);

CREATE INDEX idx_comments_task ON comments(task_id);
CREATE INDEX idx_comments_author ON comments(author_id);
CREATE INDEX idx_comments_created ON comments(created_at);

CREATE INDEX idx_attachments_task ON attachments(task_id);
CREATE INDEX idx_attachments_uploader ON attachments(uploader_id);
CREATE INDEX idx_attachments_type ON attachments(file_type);

-- Inserção de dados de exemplo
INSERT INTO users (name, email, password, role) VALUES
('Admin User', 'admin@projectflow.com', '$2a$10$exampleHash', 'ADMIN'),
('Manager User', 'manager@projectflow.com', '$2a$10$exampleHash', 'MANAGER'),
('John Developer', 'john@projectflow.com', '$2a$10$exampleHash', 'MEMBER'),
('Jane Designer', 'jane@projectflow.com', '$2a$10$exampleHash', 'MEMBER');

INSERT INTO teams (name, description) VALUES
('Equipe Desenvolvimento', 'Time responsável pelo desenvolvimento do software'),
('Equipe Design', 'Time responsável pelo design e UX');

INSERT INTO team_members (team_id, user_id) VALUES
(1, 1), (1, 2), (1, 3),  -- Admin, Manager e John na equipe Dev
(2, 4);                   -- Jane na equipe Design

INSERT INTO projects (name, description, status, start_date, deadline, team_id) VALUES
('API ProjectFlow', 'Desenvolvimento da API de gestão de projetos', 'IN_PROGRESS', '2024-01-15', '2024-06-15', 1),
('Redesign Interface', 'Redesign completo da interface do usuário', 'PLANNING', '2024-02-01', '2024-05-01', 2);

INSERT INTO tasks (title, description, status, priority, estimated_hours, project_id, assignee_id) VALUES
('Criar entidade User', 'Implementar model User com JPA', 'DONE', 'HIGH', 8, 1, 3),
('Implementar autenticação JWT', 'Configurar Spring Security com JWT', 'IN_PROGRESS', 'HIGH', 16, 1, 3),
('Criar design sistema', 'Desenvolver wireframes do sistema', 'TODO', 'MEDIUM', 24, 2, 4);

INSERT INTO comments (content, task_id, author_id) VALUES
('Entidade User criada com sucesso!', 1, 3),
('Preciso revisar as annotations de validação', 1, 2),
('Vou começar os wireframes na próxima semana', 3, 4);

INSERT INTO attachments (file_name, file_url, file_type, file_size, task_id, uploader_id) VALUES
('user_entity.png', 'https://storage.com/user_entity.png', 'png', 102400, 1, 3),
('jwt_diagram.pdf', 'https://storage.com/jwt_diagram.pdf', 'pdf', 512000, 2, 2);